/*
 * MikoPBX - free phone system for small business
 * Copyright © 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright © 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, globalTranslate, Form, Extensions */
var moduleUsersUIModifyAG = {
  $formObj: $('#module-users-ui-form'),
  $selectUsersDropDown: $('.select-extension-field'),
  $statusToggle: $('#module-status-toggle'),
  $homePageDropdown: $('.home-page-dropdown'),
  $accessSettingsTabMenu: $('#access-settings-tab-menu .item'),
  $mainTabMenu: $('#module-users-group-modify-menu .item'),
  defaultExtension: '',

  /**
   * jQuery object for the uncheck button.
   * @type {jQuery}
   */
  $unCheckButton: $('.uncheck.button'),

  /**
   * jQuery object for the uncheck button.
   * @type {jQuery}
   */
  $checkButton: $('.check.button'),
  validateRules: {
    name: {
      identifier: 'name',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.module_usersui_ValidateNameIsEmpty
      }]
    }
  },
  initialize: function initialize() {
    var _this = this;

    moduleUsersUIModifyAG.checkStatusToggle();
    window.addEventListener('ModuleStatusChanged', moduleUsersUIModifyAG.checkStatusToggle);
    moduleUsersUIModifyAG.initializeForm();
    $('.avatar').each(function () {
      if ($(_this).attr('src') === '') {
        $(_this).attr('src', "".concat(globalRootUrl, "assets/img/unknownPerson.jpg"));
      }
    });
    moduleUsersUIModifyAG.$mainTabMenu.tab();
    moduleUsersUIModifyAG.$accessSettingsTabMenu.tab();
    moduleUsersUIModifyAG.initializeUsersDropDown();
    moduleUsersUIModifyAG.initializeRightsCheckboxes();
    moduleUsersUIModifyAG.$homePageDropdown.dropdown();
    $('body').on('click', 'div.delete-user-row', function (e) {
      e.preventDefault();
      moduleUsersUIModifyAG.deleteMemberFromTable(e.target);
    }); // Handle check button click

    moduleUsersUIModifyAG.$checkButton.on('click', function (e) {
      e.preventDefault();
      $(e.target).parent('.ui.tab').find('.ui.checkbox').checkbox('check');
    }); // Handle uncheck button click

    moduleUsersUIModifyAG.$unCheckButton.on('click', function (e) {
      e.preventDefault();
      $(e.target).parent('.ui.tab').find('.ui.checkbox').checkbox('uncheck');
    });
  },

  /**
   * Delete Group member from list
   * @param target - link to pushed button
   */
  deleteMemberFromTable: function deleteMemberFromTable(target) {
    var id = $(target).closest('div').attr('data-value');
    $("#".concat(id)).removeClass('selected-member').hide();
    Form.dataChanged();
  },

  /**
   * Настройка выпадающего списка пользователей
   */
  initializeUsersDropDown: function initializeUsersDropDown() {
    var dropdownParams = Extensions.getDropdownSettingsOnlyInternalWithoutEmpty();
    dropdownParams.action = moduleUsersUIModifyAG.cbAfterUsersSelect;
    dropdownParams.templates = {
      menu: moduleUsersUIModifyAG.customDropdownMenu
    };
    moduleUsersUIModifyAG.$selectUsersDropDown.dropdown(dropdownParams);
  },
  initializeRightsCheckboxes: function initializeRightsCheckboxes() {
    $('#access-group-rights .list .master.checkbox').checkbox({
      // check all children
      onChecked: function onChecked() {
        var $childCheckbox = $(this).closest('.checkbox').siblings('.list').find('.checkbox');
        $childCheckbox.checkbox('check');
      },
      // uncheck all children
      onUnchecked: function onUnchecked() {
        var $childCheckbox = $(this).closest('.checkbox').siblings('.list').find('.checkbox');
        $childCheckbox.checkbox('uncheck');
      }
    });
    $('#access-group-rights .list .child.checkbox').checkbox({
      // Fire on load to set parent value
      fireOnInit: true,
      // Change parent state on each child checkbox change
      onChange: function onChange() {
        var $listGroup = $(this).closest('.list'),
            $parentCheckbox = $listGroup.closest('.item').children('.checkbox'),
            $checkbox = $listGroup.find('.checkbox'),
            allChecked = true,
            allUnchecked = true; // check to see if all other siblings are checked or unchecked

        $checkbox.each(function () {
          if ($(this).checkbox('is checked')) {
            allUnchecked = false;
          } else {
            allChecked = false;
          }
        }); // set parent checkbox state, but dont trigger its onChange callback

        if (allChecked) {
          $parentCheckbox.checkbox('set checked');
        } else if (allUnchecked) {
          $parentCheckbox.checkbox('set unchecked');
        } else {
          $parentCheckbox.checkbox('set indeterminate');
        }
      }
    });
  },

  /**
   * Change custom menu visualisation
   * @param response
   * @param fields
   * @returns {string}
   */
  customDropdownMenu: function customDropdownMenu(response, fields) {
    var values = response[fields.values] || {};
    var html = '';
    var oldType = '';
    $.each(values, function (index, option) {
      if (option.type !== oldType) {
        oldType = option.type;
        html += '<div class="divider"></div>';
        html += '	<div class="header">';
        html += '	<i class="tags icon"></i>';
        html += option.typeLocalized;
        html += '</div>';
      }

      var maybeText = option[fields.text] ? "data-text=\"".concat(option[fields.text], "\"") : '';
      var maybeDisabled = $("#ext-".concat(option[fields.value])).hasClass('selected-member') ? 'disabled ' : '';
      html += "<div class=\"".concat(maybeDisabled, "item\" data-value=\"").concat(option[fields.value], "\"").concat(maybeText, ">");
      html += option[fields.name];
      html += '</div>';
    });
    return html;
  },

  /**
   * Колбек после выбора пользователя в группу
   * @param value
   */
  cbAfterUsersSelect: function cbAfterUsersSelect(text, value, $element) {
    $("#ext-".concat(value)).closest('tr').addClass('selected-member').show();
    $($element).addClass('disabled');
    Form.dataChanged();
  },

  /**
   * Изменение статуса кнопок при изменении статуса модуля
   */
  checkStatusToggle: function checkStatusToggle() {
    if (moduleUsersUIModifyAG.$statusToggle.checkbox('is checked')) {
      $('[data-tab = "general"] .disability').removeClass('disabled');
      $('[data-tab = "users"] .disability').removeClass('disabled');
    } else {
      $('[data-tab = "general"] .disability').addClass('disabled');
      $('[data-tab = "users"] .disability').addClass('disabled');
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = moduleUsersUIModifyAG.$formObj.form('get values');
    var arrMembers = [];
    $('tr.selected-member').each(function (index, obj) {
      if ($(obj).attr('id')) {
        arrMembers.push($(obj).attr('id'));
      }
    });
    result.data.members = JSON.stringify(arrMembers);
    var arrGroupRights = [];
    $('input.access-group-checkbox').each(function (index, obj) {
      if ($(obj).parent('.checkbox').checkbox('is checked')) {
        var module = $(obj).attr('data-module');
        var controller = $(obj).attr('data-controller');
        var action = $(obj).attr('data-action'); // Find the module in arrGroupRights or create a new entry

        var moduleIndex = arrGroupRights.findIndex(function (item) {
          return item.module === module;
        });

        if (moduleIndex === -1) {
          arrGroupRights.push({
            module: module,
            controllers: []
          });
          moduleIndex = arrGroupRights.length - 1;
        } // Find the controller in the module or create a new entry


        var moduleControllers = arrGroupRights[moduleIndex].controllers;
        var controllerIndex = moduleControllers.findIndex(function (item) {
          return item.controller === controller;
        });

        if (controllerIndex === -1) {
          moduleControllers.push({
            controller: controller,
            actions: []
          });
          controllerIndex = moduleControllers.length - 1;
        } // Push the action into the controller's actions array


        moduleControllers[controllerIndex].actions.push(action);
      }
    });
    result.data.access_group_rights = JSON.stringify(arrGroupRights);
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {},
  initializeForm: function initializeForm() {
    Form.$formObj = moduleUsersUIModifyAG.$formObj;
    Form.url = "".concat(globalRootUrl, "module-users-u-i/access-groups/save");
    Form.validateRules = moduleUsersUIModifyAG.validateRules;
    Form.cbBeforeSendForm = moduleUsersUIModifyAG.cbBeforeSendForm;
    Form.cbAfterSendForm = moduleUsersUIModifyAG.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  moduleUsersUIModifyAG.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUtdXNlcnMtdWktbW9kaWZ5LWFnLmpzIl0sIm5hbWVzIjpbIm1vZHVsZVVzZXJzVUlNb2RpZnlBRyIsIiRmb3JtT2JqIiwiJCIsIiRzZWxlY3RVc2Vyc0Ryb3BEb3duIiwiJHN0YXR1c1RvZ2dsZSIsIiRob21lUGFnZURyb3Bkb3duIiwiJGFjY2Vzc1NldHRpbmdzVGFiTWVudSIsIiRtYWluVGFiTWVudSIsImRlZmF1bHRFeHRlbnNpb24iLCIkdW5DaGVja0J1dHRvbiIsIiRjaGVja0J1dHRvbiIsInZhbGlkYXRlUnVsZXMiLCJuYW1lIiwiaWRlbnRpZmllciIsInJ1bGVzIiwidHlwZSIsInByb21wdCIsImdsb2JhbFRyYW5zbGF0ZSIsIm1vZHVsZV91c2Vyc3VpX1ZhbGlkYXRlTmFtZUlzRW1wdHkiLCJpbml0aWFsaXplIiwiY2hlY2tTdGF0dXNUb2dnbGUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdGlhbGl6ZUZvcm0iLCJlYWNoIiwiYXR0ciIsImdsb2JhbFJvb3RVcmwiLCJ0YWIiLCJpbml0aWFsaXplVXNlcnNEcm9wRG93biIsImluaXRpYWxpemVSaWdodHNDaGVja2JveGVzIiwiZHJvcGRvd24iLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRlbGV0ZU1lbWJlckZyb21UYWJsZSIsInRhcmdldCIsInBhcmVudCIsImZpbmQiLCJjaGVja2JveCIsImlkIiwiY2xvc2VzdCIsInJlbW92ZUNsYXNzIiwiaGlkZSIsIkZvcm0iLCJkYXRhQ2hhbmdlZCIsImRyb3Bkb3duUGFyYW1zIiwiRXh0ZW5zaW9ucyIsImdldERyb3Bkb3duU2V0dGluZ3NPbmx5SW50ZXJuYWxXaXRob3V0RW1wdHkiLCJhY3Rpb24iLCJjYkFmdGVyVXNlcnNTZWxlY3QiLCJ0ZW1wbGF0ZXMiLCJtZW51IiwiY3VzdG9tRHJvcGRvd25NZW51Iiwib25DaGVja2VkIiwiJGNoaWxkQ2hlY2tib3giLCJzaWJsaW5ncyIsIm9uVW5jaGVja2VkIiwiZmlyZU9uSW5pdCIsIm9uQ2hhbmdlIiwiJGxpc3RHcm91cCIsIiRwYXJlbnRDaGVja2JveCIsImNoaWxkcmVuIiwiJGNoZWNrYm94IiwiYWxsQ2hlY2tlZCIsImFsbFVuY2hlY2tlZCIsInJlc3BvbnNlIiwiZmllbGRzIiwidmFsdWVzIiwiaHRtbCIsIm9sZFR5cGUiLCJpbmRleCIsIm9wdGlvbiIsInR5cGVMb2NhbGl6ZWQiLCJtYXliZVRleHQiLCJ0ZXh0IiwibWF5YmVEaXNhYmxlZCIsInZhbHVlIiwiaGFzQ2xhc3MiLCIkZWxlbWVudCIsImFkZENsYXNzIiwic2hvdyIsImNiQmVmb3JlU2VuZEZvcm0iLCJzZXR0aW5ncyIsInJlc3VsdCIsImRhdGEiLCJmb3JtIiwiYXJyTWVtYmVycyIsIm9iaiIsInB1c2giLCJtZW1iZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsImFyckdyb3VwUmlnaHRzIiwibW9kdWxlIiwiY29udHJvbGxlciIsIm1vZHVsZUluZGV4IiwiZmluZEluZGV4IiwiaXRlbSIsImNvbnRyb2xsZXJzIiwibGVuZ3RoIiwibW9kdWxlQ29udHJvbGxlcnMiLCJjb250cm9sbGVySW5kZXgiLCJhY3Rpb25zIiwiYWNjZXNzX2dyb3VwX3JpZ2h0cyIsImNiQWZ0ZXJTZW5kRm9ybSIsInVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUdBLElBQU1BLHFCQUFxQixHQUFHO0FBQzFCQyxFQUFBQSxRQUFRLEVBQUVDLENBQUMsQ0FBQyx1QkFBRCxDQURlO0FBRTFCQyxFQUFBQSxvQkFBb0IsRUFBRUQsQ0FBQyxDQUFDLHlCQUFELENBRkc7QUFHMUJFLEVBQUFBLGFBQWEsRUFBRUYsQ0FBQyxDQUFDLHVCQUFELENBSFU7QUFJMUJHLEVBQUFBLGlCQUFpQixFQUFFSCxDQUFDLENBQUMscUJBQUQsQ0FKTTtBQUsxQkks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RWpCLENBclB5QjtBQXNQMUJqRixFQUFBQSxjQXRQMEIsNEJBc1BUO0FBQ2JvQixJQUFBQSxJQUFJLENBQUMxQyxRQUFMLEdBQWdCRCxxQkFBcUIsQ0FBQ0MsUUFBdEM7QUFDQTBDLElBQUFBLElBQUksQ0FBQzhELEdBQUwsYUFBYy9FLGFBQWQ7QUFDQWlCLElBQUFBLElBQUksQ0FBQ2hDLGFBQUwsR0FBcUJYLHFCQUFxQixDQUFDVyxhQUEzQztBQUNBZ0MsSUFBQUEsSUFBSSxDQUFDc0MsZ0JBQUwsR0FBd0JqRixxQkFBcUIsQ0FBQ2lGLGdCQUE5QztBQUNBdEMsSUFBQUEsSUFBSSxDQUFDNkQsZUFBTCxHQUF1QnhHLHFCQUFxQixDQUFDd0csZUFBN0M7QUFDQTdELElBQUFBLElBQUksQ0FBQ3hCLFVBQUw7QUFDSDtBQTdQeUIsQ0FBOUI7QUFnUUFqQixDQUFDLENBQUN3RyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3BCM0csRUFBQUEscUJBQXFCLENBQUNtQixVQUF0QjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgZ2xvYmFsVHJhbnNsYXRlLCBGb3JtLCBFeHRlbnNpb25zICovXG5cblxuY29uc3QgbW9kdWxlVXNlcnNVSU1vZGlmeUFHID0ge1xuICAgICRmb3JtT2JqOiAkKCcjbW9kdWxlLXVzZXJzLXVpLWZvcm0nKSxcbiAgICAkc2VsZWN0VXNlcnNEcm9wRG93bjogJCgnLnNlbGVjdC1leHRlbnNpb24tZmllbGQnKSxcbiAgICAkc3RhdHVzVG9nZ2xlOiAkKCcjbW9kdWxlLXN0YXR1cy10b2dnbGUnKSxcbiAgICAkaG9tZVBhZ2VEcm9wZG93bjogJCgnLmhvbWUtcGFnZS1kcm9wZG93bicpLFxuICAgICRhY2Nlc3NTZXR0aW5nc1RhYk1lbnU6ICQoJyNhY2Nlc3Mtc2V0dGluZ3MtdGFiLW1lbnUgLml0ZW0nKSxcbiAgICAkbWFpblRhYk1lbnU6ICQoJyNtb2R1bGUtdXNlcnMtZ3JvdXAtbW9kaWZ5LW1lbnUgLml0ZW0nKSxcbiAgICBkZWZhdWx0RXh0ZW5zaW9uOiAnJyxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSB1bmNoZWNrIGJ1dHRvbi5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICR1bkNoZWNrQnV0dG9uOiAkKCcudW5jaGVjay5idXR0b24nKSxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSB1bmNoZWNrIGJ1dHRvbi5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRjaGVja0J1dHRvbjogJCgnLmNoZWNrLmJ1dHRvbicpLFxuXG4gICAgdmFsaWRhdGVSdWxlczoge1xuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnbmFtZScsXG4gICAgICAgICAgICBydWxlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VtcHR5JyxcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUubW9kdWxlX3VzZXJzdWlfVmFsaWRhdGVOYW1lSXNFbXB0eSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmNoZWNrU3RhdHVzVG9nZ2xlKCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdNb2R1bGVTdGF0dXNDaGFuZ2VkJywgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmNoZWNrU3RhdHVzVG9nZ2xlKTtcbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmluaXRpYWxpemVGb3JtKCk7XG5cbiAgICAgICAgJCgnLmF2YXRhcicpLmVhY2goKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCQodGhpcykuYXR0cignc3JjJykgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzcmMnLCBgJHtnbG9iYWxSb290VXJsfWFzc2V0cy9pbWcvdW5rbm93blBlcnNvbi5qcGdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRtYWluVGFiTWVudS50YWIoKTtcbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRhY2Nlc3NTZXR0aW5nc1RhYk1lbnUudGFiKCk7XG5cbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmluaXRpYWxpemVVc2Vyc0Ryb3BEb3duKCk7XG5cbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmluaXRpYWxpemVSaWdodHNDaGVja2JveGVzKCk7XG5cbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRob21lUGFnZURyb3Bkb3duLmRyb3Bkb3duKCk7XG5cbiAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICdkaXYuZGVsZXRlLXVzZXItcm93JywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG1vZHVsZVVzZXJzVUlNb2RpZnlBRy5kZWxldGVNZW1iZXJGcm9tVGFibGUoZS50YXJnZXQpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIEhhbmRsZSBjaGVjayBidXR0b24gY2xpY2tcbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRjaGVja0J1dHRvbi5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJChlLnRhcmdldCkucGFyZW50KCcudWkudGFiJykuZmluZCgnLnVpLmNoZWNrYm94JykuY2hlY2tib3goJ2NoZWNrJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhhbmRsZSB1bmNoZWNrIGJ1dHRvbiBjbGlja1xuICAgICAgICBtb2R1bGVVc2Vyc1VJTW9kaWZ5QUcuJHVuQ2hlY2tCdXR0b24ub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICQoZS50YXJnZXQpLnBhcmVudCgnLnVpLnRhYicpLmZpbmQoJy51aS5jaGVja2JveCcpLmNoZWNrYm94KCd1bmNoZWNrJyk7XG4gICAgICAgIH0pO1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBHcm91cCBtZW1iZXIgZnJvbSBsaXN0XG4gICAgICogQHBhcmFtIHRhcmdldCAtIGxpbmsgdG8gcHVzaGVkIGJ1dHRvblxuICAgICAqL1xuICAgIGRlbGV0ZU1lbWJlckZyb21UYWJsZSh0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgaWQgPSAkKHRhcmdldCkuY2xvc2VzdCgnZGl2JykuYXR0cignZGF0YS12YWx1ZScpO1xuICAgICAgICAkKGAjJHtpZH1gKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzZWxlY3RlZC1tZW1iZXInKVxuICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICBGb3JtLmRhdGFDaGFuZ2VkKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqINCd0LDRgdGC0YDQvtC50LrQsCDQstGL0L/QsNC00LDRjtGJ0LXQs9C+INGB0L/QuNGB0LrQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuVxuICAgICAqL1xuICAgIGluaXRpYWxpemVVc2Vyc0Ryb3BEb3duKCkge1xuICAgICAgICBjb25zdCBkcm9wZG93blBhcmFtcyA9IEV4dGVuc2lvbnMuZ2V0RHJvcGRvd25TZXR0aW5nc09ubHlJbnRlcm5hbFdpdGhvdXRFbXB0eSgpO1xuICAgICAgICBkcm9wZG93blBhcmFtcy5hY3Rpb24gPSBtb2R1bGVVc2Vyc1VJTW9kaWZ5QUcuY2JBZnRlclVzZXJzU2VsZWN0O1xuICAgICAgICBkcm9wZG93blBhcmFtcy50ZW1wbGF0ZXMgPSB7IG1lbnU6IG1vZHVsZVVzZXJzVUlNb2RpZnlBRy5jdXN0b21Ecm9wZG93bk1lbnUgfTtcbiAgICAgICAgbW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRzZWxlY3RVc2Vyc0Ryb3BEb3duLmRyb3Bkb3duKGRyb3Bkb3duUGFyYW1zKTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZVJpZ2h0c0NoZWNrYm94ZXMoKSB7XG4gICAgICAgICQoJyNhY2Nlc3MtZ3JvdXAtcmlnaHRzIC5saXN0IC5tYXN0ZXIuY2hlY2tib3gnKVxuICAgICAgICAgICAgLmNoZWNrYm94KHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBhbGwgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBvbkNoZWNrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZENoZWNrYm94ICA9ICQodGhpcykuY2xvc2VzdCgnLmNoZWNrYm94Jykuc2libGluZ3MoJy5saXN0JykuZmluZCgnLmNoZWNrYm94JylcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAkY2hpbGRDaGVja2JveC5jaGVja2JveCgnY2hlY2snKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIHVuY2hlY2sgYWxsIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgb25VbmNoZWNrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZENoZWNrYm94ICA9ICQodGhpcykuY2xvc2VzdCgnLmNoZWNrYm94Jykuc2libGluZ3MoJy5saXN0JykuZmluZCgnLmNoZWNrYm94JylcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAkY2hpbGRDaGVja2JveC5jaGVja2JveCgndW5jaGVjaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICAgICAgJCgnI2FjY2Vzcy1ncm91cC1yaWdodHMgLmxpc3QgLmNoaWxkLmNoZWNrYm94JylcbiAgICAgICAgICAgIC5jaGVja2JveCh7XG4gICAgICAgICAgICAgICAgLy8gRmlyZSBvbiBsb2FkIHRvIHNldCBwYXJlbnQgdmFsdWVcbiAgICAgICAgICAgICAgICBmaXJlT25Jbml0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgcGFyZW50IHN0YXRlIG9uIGVhY2ggY2hpbGQgY2hlY2tib3ggY2hhbmdlXG4gICAgICAgICAgICAgICAgb25DaGFuZ2UgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICRsaXN0R3JvdXAgICAgICA9ICQodGhpcykuY2xvc2VzdCgnLmxpc3QnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRwYXJlbnRDaGVja2JveCA9ICRsaXN0R3JvdXAuY2xvc2VzdCgnLml0ZW0nKS5jaGlsZHJlbignLmNoZWNrYm94JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAkY2hlY2tib3ggICAgICAgPSAkbGlzdEdyb3VwLmZpbmQoJy5jaGVja2JveCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ2hlY2tlZCAgICAgID0gdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFVuY2hlY2tlZCAgICA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgYWxsIG90aGVyIHNpYmxpbmdzIGFyZSBjaGVja2VkIG9yIHVuY2hlY2tlZFxuICAgICAgICAgICAgICAgICAgICAkY2hlY2tib3guZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHRoaXMpLmNoZWNrYm94KCdpcyBjaGVja2VkJykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsVW5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcGFyZW50IGNoZWNrYm94IHN0YXRlLCBidXQgZG9udCB0cmlnZ2VyIGl0cyBvbkNoYW5nZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICBpZihhbGxDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcGFyZW50Q2hlY2tib3guY2hlY2tib3goJ3NldCBjaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihhbGxVbmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRwYXJlbnRDaGVja2JveC5jaGVja2JveCgnc2V0IHVuY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHBhcmVudENoZWNrYm94LmNoZWNrYm94KCdzZXQgaW5kZXRlcm1pbmF0ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIGN1c3RvbSBtZW51IHZpc3VhbGlzYXRpb25cbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcbiAgICAgKiBAcGFyYW0gZmllbGRzXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBjdXN0b21Ecm9wZG93bk1lbnUocmVzcG9uc2UsIGZpZWxkcykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSByZXNwb25zZVtmaWVsZHMudmFsdWVzXSB8fCB7fTtcbiAgICAgICAgbGV0IGh0bWwgPSAnJztcbiAgICAgICAgbGV0IG9sZFR5cGUgPSAnJztcbiAgICAgICAgJC5lYWNoKHZhbHVlcywgKGluZGV4LCBvcHRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb24udHlwZSAhPT0gb2xkVHlwZSkge1xuICAgICAgICAgICAgICAgIG9sZFR5cGUgPSBvcHRpb24udHlwZTtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiZGl2aWRlclwiPjwvZGl2Pic7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnXHQ8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+JztcbiAgICAgICAgICAgICAgICBodG1sICs9ICdcdDxpIGNsYXNzPVwidGFncyBpY29uXCI+PC9pPic7XG4gICAgICAgICAgICAgICAgaHRtbCArPSBvcHRpb24udHlwZUxvY2FsaXplZDtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8L2Rpdj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWF5YmVUZXh0ID0gKG9wdGlvbltmaWVsZHMudGV4dF0pID8gYGRhdGEtdGV4dD1cIiR7b3B0aW9uW2ZpZWxkcy50ZXh0XX1cImAgOiAnJztcbiAgICAgICAgICAgIGNvbnN0IG1heWJlRGlzYWJsZWQgPSAoJChgI2V4dC0ke29wdGlvbltmaWVsZHMudmFsdWVdfWApLmhhc0NsYXNzKCdzZWxlY3RlZC1tZW1iZXInKSkgPyAnZGlzYWJsZWQgJyA6ICcnO1xuICAgICAgICAgICAgaHRtbCArPSBgPGRpdiBjbGFzcz1cIiR7bWF5YmVEaXNhYmxlZH1pdGVtXCIgZGF0YS12YWx1ZT1cIiR7b3B0aW9uW2ZpZWxkcy52YWx1ZV19XCIke21heWJlVGV4dH0+YDtcbiAgICAgICAgICAgIGh0bWwgKz0gb3B0aW9uW2ZpZWxkcy5uYW1lXTtcbiAgICAgICAgICAgIGh0bWwgKz0gJzwvZGl2Pic7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqINCa0L7Qu9Cx0LXQuiDQv9C+0YHQu9C1INCy0YvQsdC+0YDQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LIg0LPRgNGD0L/Qv9GDXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgY2JBZnRlclVzZXJzU2VsZWN0KHRleHQsIHZhbHVlLCAkZWxlbWVudCkge1xuICAgICAgICAkKGAjZXh0LSR7dmFsdWV9YClcbiAgICAgICAgICAgIC5jbG9zZXN0KCd0cicpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdGVkLW1lbWJlcicpXG4gICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAkKCRlbGVtZW50KS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgRm9ybS5kYXRhQ2hhbmdlZCgpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog0JjQt9C80LXQvdC10L3QuNC1INGB0YLQsNGC0YPRgdCwINC60L3QvtC/0L7QuiDQv9GA0Lgg0LjQt9C80LXQvdC10L3QuNC4INGB0YLQsNGC0YPRgdCwINC80L7QtNGD0LvRj1xuICAgICAqL1xuICAgIGNoZWNrU3RhdHVzVG9nZ2xlKCkge1xuICAgICAgICBpZiAobW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRzdGF0dXNUb2dnbGUuY2hlY2tib3goJ2lzIGNoZWNrZWQnKSkge1xuICAgICAgICAgICAgJCgnW2RhdGEtdGFiID0gXCJnZW5lcmFsXCJdIC5kaXNhYmlsaXR5JykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAkKCdbZGF0YS10YWIgPSBcInVzZXJzXCJdIC5kaXNhYmlsaXR5JykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCdbZGF0YS10YWIgPSBcImdlbmVyYWxcIl0gLmRpc2FiaWxpdHknKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICQoJ1tkYXRhLXRhYiA9IFwidXNlcnNcIl0gLmRpc2FiaWxpdHknKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBtb2R1bGVVc2Vyc1VJTW9kaWZ5QUcuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuICAgICAgICBjb25zdCBhcnJNZW1iZXJzID0gW107XG4gICAgICAgICQoJ3RyLnNlbGVjdGVkLW1lbWJlcicpLmVhY2goKGluZGV4LCBvYmopID0+IHtcbiAgICAgICAgICAgIGlmICgkKG9iaikuYXR0cignaWQnKSkge1xuICAgICAgICAgICAgICAgIGFyck1lbWJlcnMucHVzaCgkKG9iaikuYXR0cignaWQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlc3VsdC5kYXRhLm1lbWJlcnMgPSBKU09OLnN0cmluZ2lmeShhcnJNZW1iZXJzKTtcblxuICAgICAgICBjb25zdCBhcnJHcm91cFJpZ2h0cyA9IFtdO1xuICAgICAgICAkKCdpbnB1dC5hY2Nlc3MtZ3JvdXAtY2hlY2tib3gnKS5lYWNoKChpbmRleCwgb2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAoJChvYmopLnBhcmVudCgnLmNoZWNrYm94JykuY2hlY2tib3goJ2lzIGNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9ICQob2JqKS5hdHRyKCdkYXRhLW1vZHVsZScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSAkKG9iaikuYXR0cignZGF0YS1jb250cm9sbGVyJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gJChvYmopLmF0dHIoJ2RhdGEtYWN0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBtb2R1bGUgaW4gYXJyR3JvdXBSaWdodHMgb3IgY3JlYXRlIGEgbmV3IGVudHJ5XG4gICAgICAgICAgICAgICAgbGV0IG1vZHVsZUluZGV4ID0gYXJyR3JvdXBSaWdodHMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5tb2R1bGUgPT09IG1vZHVsZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZHVsZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBhcnJHcm91cFJpZ2h0cy5wdXNoKHsgbW9kdWxlLCBjb250cm9sbGVyczogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUluZGV4ID0gYXJyR3JvdXBSaWdodHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBjb250cm9sbGVyIGluIHRoZSBtb2R1bGUgb3IgY3JlYXRlIGEgbmV3IGVudHJ5XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kdWxlQ29udHJvbGxlcnMgPSBhcnJHcm91cFJpZ2h0c1ttb2R1bGVJbmRleF0uY29udHJvbGxlcnM7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xsZXJJbmRleCA9IG1vZHVsZUNvbnRyb2xsZXJzLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uY29udHJvbGxlciA9PT0gY29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXJJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlQ29udHJvbGxlcnMucHVzaCh7IGNvbnRyb2xsZXIsIGFjdGlvbnM6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXggPSBtb2R1bGVDb250cm9sbGVycy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFB1c2ggdGhlIGFjdGlvbiBpbnRvIHRoZSBjb250cm9sbGVyJ3MgYWN0aW9ucyBhcnJheVxuICAgICAgICAgICAgICAgIG1vZHVsZUNvbnRyb2xsZXJzW2NvbnRyb2xsZXJJbmRleF0uYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlc3VsdC5kYXRhLmFjY2Vzc19ncm91cF9yaWdodHMgPSBKU09OLnN0cmluZ2lmeShhcnJHcm91cFJpZ2h0cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBjYkFmdGVyU2VuZEZvcm0oKSB7XG5cbiAgICB9LFxuICAgIGluaXRpYWxpemVGb3JtKCkge1xuICAgICAgICBGb3JtLiRmb3JtT2JqID0gbW9kdWxlVXNlcnNVSU1vZGlmeUFHLiRmb3JtT2JqO1xuICAgICAgICBGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9bW9kdWxlLXVzZXJzLXUtaS9hY2Nlc3MtZ3JvdXBzL3NhdmVgO1xuICAgICAgICBGb3JtLnZhbGlkYXRlUnVsZXMgPSBtb2R1bGVVc2Vyc1VJTW9kaWZ5QUcudmFsaWRhdGVSdWxlcztcbiAgICAgICAgRm9ybS5jYkJlZm9yZVNlbmRGb3JtID0gbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmNiQmVmb3JlU2VuZEZvcm07XG4gICAgICAgIEZvcm0uY2JBZnRlclNlbmRGb3JtID0gbW9kdWxlVXNlcnNVSU1vZGlmeUFHLmNiQWZ0ZXJTZW5kRm9ybTtcbiAgICAgICAgRm9ybS5pbml0aWFsaXplKCk7XG4gICAgfSxcbn07XG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBtb2R1bGVVc2Vyc1VJTW9kaWZ5QUcuaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=