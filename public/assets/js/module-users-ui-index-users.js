"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global SemanticLocalization, globalRootUrl, moduleUsersUiIndexLdap, UserMessage, Datatable */
var ModuleUsersUIUsersTab = {
  /**
   * Users table.
   * @type {jQuery}
   */
  $usersTable: $('#users-table'),

  /**
   * User data table.
   * @type {Datatable}
   */
  userDataTable: null,

  /**
   * Select group dropdowns.
   * @type {jQuery}
   */
  $selectGroup: $('.select-group'),

  /**
   * User use LDAP table checkboxes.
   * @type {jQuery}
   */
  $userUseLdapTableCheckbox: $('.user-use-ldap-checkbox'),

  /**
   * Body.
   * @type {jQuery}
   */
  $body: $('body'),

  /**
   * Initializes the ModuleUsersUIIndex module.
   */
  initialize: function initialize() {
    ModuleUsersUIUsersTab.initializeDataTable();
    ModuleUsersUIUsersTab.$selectGroup.each(function (index, obj) {
      $(obj).dropdown({
        values: ModuleUsersUIUsersTab.makeDropdownList($(obj).attr('data-value'))
      });
    });
    ModuleUsersUIUsersTab.$selectGroup.dropdown({
      onChange: ModuleUsersUIUsersTab.changeGroupInList
    });
    ModuleUsersUIUsersTab.$userUseLdapTableCheckbox.checkbox({
      onChange: ModuleUsersUIUsersTab.changeLdapInList
    }); // Double click on password or login input field in the table

    ModuleUsersUIUsersTab.$body.on('focusin', '.user-login-input, .user-password-input', function (e) {
      $(e.target).transition('glow');
      $(e.target).closest('div').removeClass('transparent').addClass('changed-field');
      $(e.target).attr('readonly', false);

      if (moduleUsersUiIndexLdap.$useLdapCheckbox.checkbox('is checked') && $(e.target).closest('tr').find('.user-use-ldap-checkbox').checkbox('is checked')) {
        var $inputField = $(e.target);
        $inputField.closest('div').search({
          // change the search endpoint to a custom endpoint by manipulating apiSettings
          apiSettings: {
            url: "".concat(globalRootUrl, "module-users-u-i/ldap-config/search-ldap-user/{query}")
          }
        }); // Handle Enters key press event

        $inputField.on('keydown', function (event) {
          if (event.key === 'Enter') {
            // Prevent default action (if form, prevent submission)
            event.preventDefault();
            var $searchResults = $inputField.closest('div').find('.results .result'); // If there is one result, insert it into the field

            if ($searchResults.length === 1) {
              var result = $searchResults.first().data('result');
              $inputField.val(result.title);
            }
          }
        });
      }
    }); // Submit form on Enter or Tab

    $(document).on('keydown', function (e) {
      var keyCode = e.keyCode || e.which;

      if (keyCode === 13 || keyCode === 9 && !$(':focus').hasClass('.user-login-input') || keyCode === 9 && !$(':focus').hasClass('.user-password-input')) {
        var $el = $('.changed-field').closest('tr');
        $el.each(function (index, obj) {
          var currentRowId = $(obj).attr('id');

          if (currentRowId !== undefined) {
            ModuleUsersUIUsersTab.changeLoginPasswordInList(currentRowId);
          }
        });
      }
    }); // Submit form on focus out from password or login input field

    ModuleUsersUIUsersTab.$body.on('focusout', '.user-login-input, .user-password-input', function (e) {
      var $el = $('.changed-field').closest('tr');
      $el.each(function (index, obj) {
        var currentRowId = $(obj).attr('id');

        if (currentRowId !== undefined) {
          ModuleUsersUIUsersTab.changeLoginPasswordInList(currentRowId);
        }
      });
    });
  },

  /**
   * Initializes the users table DataTable.
   */
  initializeDataTable: function initializeDataTable() {
    $('#main-users-ui-tab-menu .item').tab({
      onVisible: function onVisible() {
        if ($(this).data('tab') === 'users' && ModuleUsersUIUsersTab.userDataTable !== null) {
          var newPageLength = ModuleUsersUIUsersTab.calculatePageLength();
          ModuleUsersUIUsersTab.userDataTable.page.len(newPageLength).draw(false);
        }
      }
    });
    ModuleUsersUIUsersTab.userDataTable = ModuleUsersUIUsersTab.$usersTable.DataTable({
      // destroy: true,
      lengthChange: false,
      paging: true,
      pageLength: ModuleUsersUIUsersTab.calculatePageLength(),
      scrollCollapse: true,
      columns: [// Username
      {
        orderable: true,
        // This column is orderable
        searchable: true // This column is searchable

      }, // Extension
      {
        orderable: true,
        // This column is orderable
        searchable: true // This column is searchable

      }, // Use LDAP
      {
        orderable: false,
        // This column is not orderable
        searchable: false // This column is not searchable

      }, // Login
      {
        orderable: true,
        // This column is orderable
        searchable: true // This column is searchable

      }, // Password
      {
        orderable: false,
        // This column is not orderable
        searchable: false // This column is not searchable

      }, // Access group
      {
        orderable: true,
        // This column is orderable
        searchable: true // This column is searchable

      }],
      order: [0, 'asc'],
      language: SemanticLocalization.dataTableLocalisation
    });
  },

  /**
   * Creates a dropdown list for users.
   * @param {string} selected - The selected value.
   * @returns {Array} - The dropdown list.
   */
  makeDropdownList: function makeDropdownList(selected) {
    var values = [];
    $('#users-groups-list option').each(function (index, obj) {
      var displayText = obj.text.length > 50 ? obj.text.substring(0, 50) + '...' : obj.text;

      if (selected === obj.text || selected === obj.value) {
        values.push({
          name: displayText,
          value: obj.value,
          selected: true
        });
      } else {
        values.push({
          name: displayText,
          value: obj.value
        });
      }
    });
    return values;
  },

  /**
   * Handles the change of group in the list.
   * @param {string} value - The selected value.
   * @param {string} text - The selected text.
   * @param {jQuery} $choice - The dropdown element.
   */
  changeGroupInList: function changeGroupInList(value, text, $choice) {
    var rowId = $($choice).closest('tr').attr('id');
    ModuleUsersUIUsersTab.addProgressIcon(rowId);
    $.api({
      url: "".concat(globalRootUrl, "module-users-u-i/users-credentials/change-user-group"),
      on: 'now',
      method: 'POST',
      data: {
        user_id: rowId,
        group_id: value
      },
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0 && response.success === true;
      },
      onSuccess: function onSuccess() {
        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
        $('.ui.message.ajax').remove();
      },
      onError: function onError(response) {
        if (response.message !== undefined) {
          UserMessage.showMultiString(response.message);
        }

        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
      },
      onFailure: function onFailure(response) {
        if (response.message !== undefined) {
          UserMessage.showMultiString(response.message);
        }

        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
      }
    });
  },

  /**
   * Handles the change of LDAP checkbox in the list.
   */
  changeLdapInList: function changeLdapInList() {
    var rowId = $(this).closest('tr').attr('id');
    ModuleUsersUIUsersTab.addProgressIcon(rowId);
    $.api({
      url: "".concat(globalRootUrl, "module-users-u-i/users-credentials/change-user-use-ldap"),
      on: 'now',
      method: 'POST',
      data: {
        user_id: rowId,
        useLdap: $(this).parent('.checkbox').checkbox('is checked')
      },
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0 && response.success === true;
      },
      onSuccess: function onSuccess() {
        ModuleUsersUIUsersTab.removeProgressIcon(rowId);

        if ($("tr#".concat(rowId, " .user-use-ldap-checkbox")).checkbox('is checked')) {
          $("tr#".concat(rowId, " td.password")).hide();
          $("tr#".concat(rowId, " td.login")).attr('colspan', 2);
        } else {
          $("tr#".concat(rowId, " td.password")).show();
          $("tr#".concat(rowId, " td.login")).attr('colspan', 1);
        }

        $('.ui.message.ajax').remove();
      },
      onError: function onError(response) {
        if (response.message !== undefined) {
          UserMessage.showMultiString(response.message);
        }

        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
      },
      onFailure: function onFailure(response) {
        if (response.message !== undefined) {
          UserMessage.showMultiString(response.message);
        }

        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
      }
    });
  },

  /**
   * Changes the login and password in the list.
   * @param {string} rowId - The ID of the row.
   */
  changeLoginPasswordInList: function changeLoginPasswordInList(rowId) {
    var login = $("#".concat(rowId, " input.user-login-input")).val();
    var password = $("#".concat(rowId, " input.user-password-input")).val();
    ModuleUsersUIUsersTab.addProgressIcon(rowId);
    $.api({
      url: "".concat(globalRootUrl, "module-users-u-i/users-credentials/change-user-credentials"),
      on: 'now',
      method: 'POST',
      data: {
        user_id: rowId,
        login: login,
        password: password
      },
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0 && response.success === true;
      },
      onSuccess: function onSuccess() {
        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
        $("tr#".concat(rowId, " .changed-field input")).attr('readonly', true);
        $("tr#".concat(rowId, " div.changed-field")).removeClass('changed-field loading').addClass('transparent');
        $('.ui.message.ajax').remove();
      },
      onError: function onError(response) {
        if (response.message !== undefined) {
          UserMessage.showMultiString(response.message);
        }

        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
      },
      onFailure: function onFailure(response) {
        if (response.message !== undefined) {
          UserMessage.showMultiString(response.message);
        }

        ModuleUsersUIUsersTab.removeProgressIcon(rowId);
      }
    });
  },

  /**
   * Adds save icon from the row
   */
  addProgressIcon: function addProgressIcon(rowId) {
    $("tr#".concat(rowId, " .changed-field")).find('.ui.spinner.loading.icon').show();
  },

  /**
   * Removes save icon from the row
   */
  removeProgressIcon: function removeProgressIcon(rowId) {
    $("tr#".concat(rowId, " .changed-field")).find('.ui.spinner.loading.icon').hide();
    $("tr#".concat(rowId, " .changed-field")).closest('div').search('hide results').search('destroy');
  },

  /**
   * Calculate data table page length
   *
   * @returns {number}
   */
  calculatePageLength: function calculatePageLength() {
    // Calculate row height
    var rowHeight = ModuleUsersUIUsersTab.$usersTable.find('tr').first().outerHeight(); // Calculate window height and available space for table

    var windowHeight = window.innerHeight;
    var headerFooterHeight = 400; // Estimate height for header, footer, and other elements
    // Calculate new page length

    return Math.max(Math.floor((windowHeight - headerFooterHeight) / rowHeight), 10);
  }
};
$(document).ready(function () {
  ModuleUsersUIUsersTab.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,